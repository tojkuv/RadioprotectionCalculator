@page "/"
@using System.Globalization
@rendermode InteractiveAuto

<PageTitle>Isotope Decay</PageTitle>
<MudContainer Fixed="true">
    <MudStack Row="true" Justify="Justify.Center">
        <MudItem>
            <MudPaper MinWidth="250px" MaxWidth="600px" Class="py-3" Elevation="0">
                <MudNavMenu>
                    <MudText Typo="Typo.h6" Class="px-4">Calculators</MudText>
                    <MudDivider Class="my-2"/>
                    <MudNavLink Href="/">Isotope Decay</MudNavLink>
                    <MudNavLink Href="/Counter">Dose Rate & Activity</MudNavLink>

                </MudNavMenu>
            </MudPaper>
        </MudItem>

        <MudItem>
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <MudTabPanel Text="Decay & Half-Life">
                    <MudPaper MinWidth="600px" Class="pa-4">
                        <MudStack Spacing="@Spacing">
                            <MudStack Row="true" Class="align-center">
                                <h2>Decay & Half-Life</h2>
                                <MudSpacer/>
                                <MudSwitch Value="_isIsotopeSelectionVisible" ValueChanged="((bool value) => UpdateIsotopesSwitch(value))" Label="Show Isotopes" Color="Color.Primary"/>
                            </MudStack>

                            <MudFocusTrap>
                                <MudStack Row="true" Spacing="@Spacing" Class="align-center">
                                    <MudSelect Class="flex-auto" Value="@_isotopeDecay.ActivityUnit" Label="Activity Unit" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="(Units.ActivityUnit value) => UpdateActivityUnit(value)">
                                        @foreach (var unit in Enum.GetValues(typeof(Units.ActivityUnit)))
                                        {
                                            <MudSelectItem Value="@((Units.ActivityUnit)unit)">@unit</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudSelect Class="flex-auto" Value="@_isotopeDecay.TimeSpanUnit" Label="Time Unit" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="(Units.TimeUnit value) => UpdateTimeSpanUnit(value)">
                                        @foreach (var unit in Enum.GetValues(typeof(Units.TimeUnit)))
                                        {
                                            <MudSelectItem Value="@((Units.TimeUnit)unit)">@unit</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>

                                @if (_isIsotopeSelectionVisible)
                                {
                                    <MudStack Row="true" Spacing="@Spacing" Class="align-center">
                                        <MudSelect Class="flex-auto" Value="_isotopeDecay.ElementName" Label="Element" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(string value) => UpdateElement(value)">
                                            @foreach (var elementName in IsotopeDecay.Isotopes.Keys)
                                            {
                                                <MudSelectItem Value="@elementName"/>
                                            }
                                        </MudSelect>

                                        <MudSelect Class="flex-auto" Value="_isotopeDecay.Isotope.Name" Label="Isotope" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(string value) => UpdateIsotope(value: value)">
                                            @foreach (var isotope in _isotopeDecay.ElementIsotopes)
                                            {
                                                <MudSelectItem Value="@isotope.Name"/>
                                            }
                                        </MudSelect>
                                    </MudStack>
                                }

                                <MudNumericField T="double?" Value="_halfLife" ValueChanged="(double? value) => UpdateHalfLife(halfLifeChanged: true, value: value)" Label="Half-Life" Placeholder="0.00" Variant="Variant.Outlined" Margin="Margin.Dense" HideSpinButtons="true" Adornment="Adornment.End" AdornmentText="@_isotopeDecay.TimeSpanUnit.ToString()" Class="flex-auto"/>

                                <MudNumericField Class="flex-auto" T="double?" Value="_originalActivity" Label="Original Activity" Placeholder="0.00" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="@_isotopeDecay.ActivityUnit.ToString()" HideSpinButtons="true" ValueChanged="(double? value) => UpdateOriginalActivity(value: value)"></MudNumericField>

                                <MudTextField Value="_originalDate" ValueChanged="(DateTime? datetime) => UpdateOriginalDate(datetime)" T="DateTime?" InputType="InputType.DateTimeLocal" Format="s" Label="Original Timestamp" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>

                                <MudTextField Value="_calculationDate" ValueChanged="(DateTime? datetime) => UpdateCalculationDate(datetime)" T="DateTime?" InputType="InputType.DateTimeLocal" Format="s" Label="Calculation Timestamp" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                            </MudFocusTrap>

                            <MudField ChildContent="@_calculatedActivityContent" Label="Calculated Activity" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@_isotopeDecay.ActivityUnit.ToString()" Class="flex-auto"></MudField>

                            <MudButton Class="flex-auto" Variant="Variant.Filled" OnClick="ResetFields">Reset</MudButton>

                        </MudStack>
                    </MudPaper>
                </MudTabPanel>

                <MudTabPanel Text="Timed Decay">
                    <MudPaper MinWidth="600px" MinHeight="600px" Class="pa-4"></MudPaper>
                </MudTabPanel>
            </MudTabs>
        </MudItem>

        <MudFlexBreak/>
        <MudItem>
            <MudPaper MinWidth="300px" MaxWidth="600px" Class="pa-4">
                <h1>Isotope Decay</h1>
                <p>
                    Compute the remaining quantity of a radioactive substance based on its initial amount, half-life, and elapsed time. It uses the exponential decay formula to predict the decayed amount over time, essential for understanding radioactive decay rates.
                </p>
            </MudPaper>
        </MudItem>
    </MudStack>
</MudContainer>


@code {
    // TODO: Validate the dates and times so calculation datetime must be after original datetime

    private int Spacing { get; set; } = 3;

    private bool _isIsotopeSelectionVisible = false;

    private RenderFragment? _calculatedActivityContent = @<MudText Typo="Typo.h6">@_calculatedActivity</MudText>;

    IsotopeDecay _isotopeDecay = new();

    double? _halfLife;
    double? _originalActivity;
    DateTime? _originalDate;
    DateTime? _calculationDate;

    static string? _calculatedActivity;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (_isIsotopeSelectionVisible)
            UpdateHalfLife(useDefaultHalfLife: true);
    }

    private void UpdateActivityUnit(Units.ActivityUnit unit)
    {
        _isotopeDecay.ActivityUnit = unit;

        UpdateOriginalActivity(onlyActivityUnitChanged: true);

        StateHasChanged();
    }

    private void UpdateTimeSpanUnit(Units.TimeUnit? value = null)
    {
        _isotopeDecay.TimeSpanUnit = value ?? _isotopeDecay.Isotope.PreferredHalfLifeUnit;

        UpdateHalfLife();
    }

    private void UpdateIsotopesSwitch(bool value)
    {
        if (value)
            UpdateHalfLife(useDefaultHalfLife: true);

        _isIsotopeSelectionVisible = value;
    }

    private void UpdateElement(string value)
    {
        _isotopeDecay.ElementName = value;
        _isotopeDecay.ElementIsotopes = IsotopeDecay.Isotopes.FirstOrDefault(x => x.Key == _isotopeDecay.ElementName).Value;

        UpdateIsotope(elementHasChanged: true);
    }

    private void UpdateIsotope(bool elementHasChanged = false, string? value = null)
    {
        if (elementHasChanged)
            _isotopeDecay.Isotope = _isotopeDecay.ElementIsotopes.First();
        else
            _isotopeDecay.Isotope = _isotopeDecay.ElementIsotopes.First(x => x.Name == value);

        UpdateTimeSpanUnit();
        UpdateHalfLife(useDefaultHalfLife: true);
        CalculateEstimatedActivity();
    }

    private void UpdateHalfLife(bool useDefaultHalfLife = false, bool halfLifeChanged = false, double? value = null)
    {
        if (useDefaultHalfLife)
        {
            _isotopeDecay.HalfLife = _isotopeDecay.Isotope.HalfLife;
        }
        else if (halfLifeChanged)
        {
            if (value == null)
                _isotopeDecay.HalfLife = null;
            else
                try
                {
                    var adjustedValue = Math.Max((double)value, 0.0);

                    _isotopeDecay.HalfLife = _isotopeDecay.TimeSpanUnit switch
                    {
                        Units.TimeUnit.Seconds => Duration.FromSeconds(adjustedValue),
                        Units.TimeUnit.Minutes => Duration.FromMinutes(adjustedValue),
                        Units.TimeUnit.Hours => Duration.FromHours(adjustedValue),
                        Units.TimeUnit.Days => Duration.FromDays(adjustedValue),
                        Units.TimeUnit.Years => Duration.FromDays(adjustedValue * 365.25),
                        _ => _isotopeDecay.HalfLife
                    };
                }
                catch (ArgumentOutOfRangeException)
                {
                    _isotopeDecay.HalfLife = Duration.MaxValue;
                }
        }

        _halfLife = _isotopeDecay.TimeSpanUnit switch
        {
            Units.TimeUnit.Seconds => (_isotopeDecay.HalfLife?.TotalSeconds),
            Units.TimeUnit.Minutes => (_isotopeDecay.HalfLife?.TotalMinutes),
            Units.TimeUnit.Hours => (_isotopeDecay.HalfLife?.TotalHours),
            Units.TimeUnit.Days => (_isotopeDecay.HalfLife?.TotalDays),
            Units.TimeUnit.Years => (_isotopeDecay.HalfLife?.TotalDays / 365.25),
            _ => _halfLife
        };

        CalculateEstimatedActivity();
    }

    private void UpdateOriginalActivity(bool onlyActivityUnitChanged = false, double? value = null)
    {
        if (onlyActivityUnitChanged is false)
            _isotopeDecay.OriginalActivity.SetValue(value, _isotopeDecay.ActivityUnit);

        _originalActivity = (_isotopeDecay.OriginalActivity.GetValue(_isotopeDecay.ActivityUnit));

        CalculateEstimatedActivity();
    }

    private void UpdateOriginalDate(DateTime? date)
    {
        _isotopeDecay.OriginalDate = date;
        _originalDate = _isotopeDecay.OriginalDate;

        CalculateEstimatedActivity();
    }

    private void UpdateCalculationDate(DateTime? date)
    {
        _isotopeDecay.CalculationDate = date;
        _calculationDate = _isotopeDecay.CalculationDate;

        CalculateEstimatedActivity();
    }

    private void ResetFields()
    {
        _isotopeDecay = new();

        _halfLife = null;
        _originalActivity = null;
        _originalDate = null;
        _calculationDate = null;

        CalculateEstimatedActivity();
    }

    private void CalculateEstimatedActivity(bool activityUnitUpdated = false)
    {
        if (activityUnitUpdated)
        {
            _calculatedActivity = _isotopeDecay.CalculatedActivity.GetValue(_isotopeDecay.ActivityUnit)?.ToString("G4");
        }
        else if (CalculatorHasAnyNullFields() is false)
        {
            var originalDateTime = _isotopeDecay.OriginalDate;
            var calculationDateTime = _isotopeDecay.CalculationDate;
            var timeDifference = (calculationDateTime - originalDateTime)?.TotalSeconds;

            var decayConstant = Math.Log(2) / (_isotopeDecay.HalfLife.GetValueOrDefault().TotalSeconds);

            _isotopeDecay.CalculatedActivity.SetValue((_isotopeDecay.OriginalActivity.GetValue()) * Math.Exp((double)(-decayConstant * timeDifference)!));

            _calculatedActivity = _isotopeDecay.CalculatedActivity.GetValue(_isotopeDecay.ActivityUnit)?.ToString("G4");
        }
        else
        {
            _calculatedActivity = null;
        }
    }

    private bool CalculatorHasAnyNullFields()
    {
        foreach (var property in _isotopeDecay.GetType().GetProperties())
        {
            if (property.Name == nameof(_isotopeDecay.CalculatedActivity))
                continue;

            var value = property.GetValue(_isotopeDecay);

            if (property.Name == nameof(_isotopeDecay.OriginalActivity) || property.Name == nameof(_isotopeDecay.CalculatedActivity))
            {
                var activity = value as Activity;
                if (activity != null && !activity.IsValueInitialized())
                    return true;
            }

            if (value == null)
                return true;
        }

        return false;
    }
}