@page "/"
@rendermode InteractiveAuto

@using RadioprotectionCalculator.Client.Models;

<PageTitle>Isotope Decay</PageTitle>

<MudStack Row="true" Justify="Justify.Center">
	<MudItem>
		<MudPaper MinWidth="250px" MaxWidth="600px" Class="py-3" Elevation="0">
			<MudNavMenu>
				<MudText Typo="Typo.h6" Class="px-4">Calculators</MudText>
				<MudDivider Class="my-2" />
				<MudNavLink Href="/">Isotope Decay</MudNavLink>
				<MudNavLink Href="/Counter">Dose Rate & Activity</MudNavLink>

			</MudNavMenu>
		</MudPaper>
	</MudItem>
	<MudItem>
		<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
			<MudTabPanel Text="Decay & Half-Life">
				<MudPaper MinWidth="600px" Class="pa-4">
					<MudStack Spacing="@_spacing">
						<MudStack Row="true" Class="align-center">
							<h2>Decay & Half-Life</h2>
							<MudSpacer />
							<MudSwitch @bind-Value="isIsotopeSelectionVisible" Label="Show Isotopes" Color="Color.Primary" />
						</MudStack>

						<MudFocusTrap>
							<MudStack Row="true" Spacing="@_spacing" Class="align-center">
								<MudSelect Class="flex-auto" Value="@isotopeDecay.ActivityUnit" Label="Activity Unit" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="(Units.ActivityUnit value) => UpdateActivityUnit(value)">
									@foreach (var unit in Enum.GetValues(typeof(Units.ActivityUnit)))
									{
										<MudSelectItem Value="@((Units.ActivityUnit)unit)">@unit</MudSelectItem>
									}
								</MudSelect>
								<MudSelect Class="flex-auto" Value="@isotopeDecay.TimeSpanUnit" Label="Time Unit" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="(Units.TimeUnit value) => UpdateTimeSpanUnit(value)">
									@foreach (var unit in Enum.GetValues(typeof(Units.TimeUnit)))
									{
										<MudSelectItem Value="@((Units.TimeUnit)unit)">@unit</MudSelectItem>
									}
								</MudSelect>
							</MudStack>

							@if (isIsotopeSelectionVisible)
							{
								<MudStack Row="true" Spacing="@_spacing" Class="align-center">
									<MudSelect Class="flex-auto" Value="isotopeDecay.ElementName" Label="Element" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(string value) => UpdateElement(value)">
										@foreach (var elementName in IsotopeDecay.Isotopes.Keys)
										{
											<MudSelectItem Value="@elementName" />
										}
									</MudSelect>

									<MudSelect Class="flex-auto" Value="isotopeDecay.Isotope.Name" Label="Isotope" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="(string value) => UpdateIsotope(value: value)">
										@foreach (var isotope in isotopeDecay.ElementIsotopes)
										{
											<MudSelectItem Value="@isotope.Name" />
										}
									</MudSelect>
								</MudStack>
							}

							<MudNumericField T="double?" Value="halfLife" ValueChanged="(double? value) => UpdateHalfLife(halfLifeChanged: true, value: value)" Label="Half-Life" Placeholder="0.00" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="@isotopeDecay.TimeSpanUnit.ToString()" HideSpinButtons="true" Class="flex-auto">

							</MudNumericField>

							<MudNumericField Class="flex-auto" T="double?" Value="originalActivity" Label="Original Activity" Placeholder="0.00" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="@isotopeDecay.ActivityUnit.ToString()" HideSpinButtons="true" ValueChanged="(double? value) => UpdateOriginalActivity(value ?? 0.0)"></MudNumericField>

							<div class="d-flex flex-row flex-grow-1 gap-2">
								<MudDatePicker @ref="_originalDatePicker" Date="originalDate" DateChanged="((DateTime? date) => UpdateOriginalDate(date))" Margin="Margin.Dense" Class="flex-auto" Label="Original Date" Placeholder='@DateTime.Today.ToString("yyyy-MM-dd")' DateFormat="yyyy-MM-dd" AutoClose="true" ShowToolbar="false">
									<PickerActions>
										<MudButton Class="mr-auto align-self-start" OnClick="@(() => _originalDatePicker.ClearAsync())">Clear</MudButton>
										<MudButton OnClick="@(() => _originalDatePicker.CloseAsync(false))">Cancel</MudButton>
										<MudButton Color="Color.Primary" OnClick="@(() => _originalDatePicker.CloseAsync())">Ok</MudButton>
									</PickerActions>
								</MudDatePicker>

								<MudTimePicker @ref="_originalTimePicker" Time="originalTime" TimeChanged="((TimeSpan? time) => UpdateOriginalTime(time))" Placeholder='@DateTime.Now.TimeOfDay.ToString("hh\\:mm")' AutoClose="true" Label="Original Time" ShowToolbar="false" Margin="Margin.Dense">
									<PickerActions>
										<MudButton Class="mr-auto align-self-start" OnClick="@(() => _originalTimePicker.ClearAsync())">Clear</MudButton>
										<MudButton OnClick="@(() => _originalTimePicker.CloseAsync(false))">Cancel</MudButton>
										<MudButton Color="Color.Primary" OnClick="@(() => _originalTimePicker.CloseAsync())">Ok</MudButton>
									</PickerActions>
								</MudTimePicker>
							</div>

							<div class="d-flex flex-row flex-grow-1 gap-2">
								<MudDatePicker @ref="_calculationDatePicker" Margin="Margin.Dense" Date="calculationDate" DateChanged="((DateTime? date) => UpdateCalculationDate(date))" Class="flex-auto" Label="Calculation Date" Placeholder='@DateTime.Today.ToString("yyyy-MM-dd")' DateFormat="yyyy-MM-dd" AutoClose="true" ShowToolbar="false">
									<PickerActions>
										<MudButton Class="mr-auto align-self-start" OnClick="@(() => _calculationDatePicker.ClearAsync())">Clear</MudButton>
										<MudButton OnClick="@(() => _calculationDatePicker.CloseAsync(false))">Cancel</MudButton>
										<MudButton Color="Color.Primary" OnClick="@(() => _calculationDatePicker.CloseAsync())">Ok</MudButton>
									</PickerActions>
								</MudDatePicker>

								<MudTimePicker @ref="_calculationTimePicker" Time="calculationTime" TimeChanged="((TimeSpan? time) => UpdateCalculationTime(time))" Placeholder='@DateTime.Now.TimeOfDay.ToString("hh\\:mm")' Label="Calculation Time" AutoClose="true" ShowToolbar="false" Margin="Margin.Dense">
									<PickerActions>
										<MudButton Class="mr-auto align-self-start" OnClick="@(() => _calculationTimePicker.ClearAsync())">Clear</MudButton>
										<MudButton OnClick="@(() => _calculationTimePicker.CloseAsync(false))">Clear</MudButton>
										<MudButton Color="Color.Primary" OnClick="@(() => _calculationTimePicker.CloseAsync())">Ok</MudButton>
									</PickerActions>
								</MudTimePicker>
							</div>
						</MudFocusTrap>

						<MudField Label="Calculated Activity" ChildContent="@calculatedActivityContent" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@isotopeDecay.ActivityUnit.ToString()" Class="flex-auto"></MudField>

						<MudButton Class="flex-auto" Variant="Variant.Filled" OnClick="ResetFields">Reset</MudButton>
					</MudStack>
				</MudPaper>
			</MudTabPanel>

			<MudTabPanel Text="Timed Decay">
				<MudPaper MinWidth="600px" MinHeight="500px" Class="pa-4"></MudPaper>
			</MudTabPanel>
		</MudTabs>
	</MudItem>
	<MudFlexBreak />
	<MudItem>
		<MudPaper MinWidth="300px" MaxWidth="600px" Class="pa-4">
			<h1>Isotope Decay</h1>
			<p>
				Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
			</p>
		</MudPaper>
	</MudItem>
</MudStack>
@*
	*@


@code {
	private int _spacing { get; set; } = 3;

	private bool isIsotopeSelectionVisible = true;

	private MudDatePicker _originalDatePicker;
	private MudTimePicker _originalTimePicker;

	private MudDatePicker _calculationDatePicker;
	private MudTimePicker _calculationTimePicker;

	RenderFragment calculatedActivityContent = null;

	IsotopeDecay isotopeDecay = new();

	double? halfLife = null;
	double? originalActivity = null;
	DateTime? originalDate = null;
	TimeSpan? originalTime = null;
	DateTime? calculationDate = null;
	TimeSpan? calculationTime = null;

	private void UpdateActivityUnit(Units.ActivityUnit unit)
	{
		isotopeDecay.ActivityUnit = unit;

		try
		{
			originalActivity = isotopeDecay.OriginalActivity.GetValue(unit);
			UpdateCalculatedActivityRenderFragment();
		}
		catch (Exception e)
		{

		}

		StateHasChanged();
	}

	private void UpdateTimeSpanUnit(Units.TimeUnit? value = null)
	{
		isotopeDecay.TimeSpanUnit = value ?? isotopeDecay.Isotope.PreferredHalfLifeUnit;

		UpdateHalfLife();
		StateHasChanged();
	}

	private void UpdateElement(string value)
	{
		isotopeDecay.ElementName = value;
		isotopeDecay.ElementIsotopes = IsotopeDecay.Isotopes.FirstOrDefault(x => x.Key == isotopeDecay.ElementName).Value;

		UpdateIsotope(elementHasChanged: true);
		StateHasChanged();
	}

	private void UpdateIsotope(bool elementHasChanged = false, string? value = null)
	{
		if (elementHasChanged == true)
			isotopeDecay.Isotope = isotopeDecay.ElementIsotopes.First();
		else
			isotopeDecay.Isotope = isotopeDecay.ElementIsotopes.First(x => x.Name == value);

		UpdateTimeSpanUnit();
		UpdateHalfLife(useDefaultHalfLife: true);
		CalculateEstimatedActivity();
		StateHasChanged();
	}

	private void UpdateHalfLife(bool useDefaultHalfLife = false, bool halfLifeChanged = false, double? value = null)
	{
		if (useDefaultHalfLife == true)
		{
			isotopeDecay.HalfLife = isotopeDecay.Isotope.HalfLife;
		}
		else if (halfLifeChanged == true)
		{
			if (value == null)
				isotopeDecay.HalfLife = null;
			else if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Seconds)
				isotopeDecay.HalfLife = TimeSpan.FromSeconds(value ?? 0.0);
			else if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Minutes)
				isotopeDecay.HalfLife = TimeSpan.FromMinutes(value ?? 0.0);
			else if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Hours)
				isotopeDecay.HalfLife = TimeSpan.FromHours(value ?? 0.0);
			else if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Days)
				isotopeDecay.HalfLife = TimeSpan.FromDays(value ?? 0.0);
			else if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Years)
				isotopeDecay.HalfLife = TimeSpan.FromDays(value / 365.25 ?? 0.0);
		}

		if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Seconds)
			halfLife = isotopeDecay.HalfLife?.TotalSeconds;
		else if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Minutes)
			halfLife = isotopeDecay.HalfLife?.TotalMinutes;
		else if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Hours)
			halfLife = isotopeDecay.HalfLife?.TotalHours;
		else if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Days)
			halfLife = isotopeDecay.HalfLife?.TotalDays;
		else if (isotopeDecay.TimeSpanUnit == Units.TimeUnit.Years)
			halfLife = isotopeDecay.HalfLife?.TotalDays / 365.25;

		CalculateEstimatedActivity();
		StateHasChanged();
	}

	private void UpdateOriginalActivity(double value)
	{
		isotopeDecay.OriginalActivity.SetValue(value, isotopeDecay.ActivityUnit);
		originalActivity = isotopeDecay.OriginalActivity.GetValue(isotopeDecay.ActivityUnit);

		CalculateEstimatedActivity();
		StateHasChanged();
	}

	private void UpdateOriginalDate(DateTime? date)
	{
		isotopeDecay.OriginalDate = date;
		originalDate = isotopeDecay.OriginalDate;

		CalculateEstimatedActivity();
		StateHasChanged();
	}

	private void UpdateOriginalTime(TimeSpan? time)
	{
		isotopeDecay.OriginalTime = time;
		originalTime = isotopeDecay.OriginalTime;

		CalculateEstimatedActivity();
		StateHasChanged();
	}

	private void UpdateCalculationDate(DateTime? date)
	{
		isotopeDecay.CalculationDate = date;
		calculationDate = isotopeDecay.CalculationDate;

		CalculateEstimatedActivity();
		StateHasChanged();
	}

	private void UpdateCalculationTime(TimeSpan? time)
	{
		isotopeDecay.CalculationTime = time;
		calculationTime = isotopeDecay.CalculationTime;

		CalculateEstimatedActivity();
		StateHasChanged();
	}

	private void ResetFields()
	{
		isotopeDecay = new();

		halfLife = null;
		originalActivity = null;
		originalDate = null;
		originalTime = null;
		calculationDate = null;
		calculationTime = null;

		CalculateEstimatedActivity();
	}

	private void CalculateEstimatedActivity(bool activityUnitUpdated = false)
	{
		if (activityUnitUpdated == true)
		{

		}
		else if (!calculatorHasAnyNullFields())
		{
			DateTime originalDateTime = CombineDateTime(isotopeDecay.OriginalDate, isotopeDecay.OriginalTime);
			DateTime calculationDateTime = CombineDateTime(isotopeDecay.CalculationDate, isotopeDecay.CalculationTime);
			double timeDifference = (calculationDateTime - originalDateTime).TotalSeconds;

			double decayConstant = Math.Log(2) / (isotopeDecay.HalfLife.GetValueOrDefault().TotalSeconds);

			isotopeDecay.CalculatedActivity.SetValue((isotopeDecay.OriginalActivity.GetValue()) * Math.Exp(-decayConstant * timeDifference));

			UpdateCalculatedActivityRenderFragment();
		}
	}

	private bool calculatorHasAnyNullFields()
	{
		foreach (var property in isotopeDecay.GetType().GetProperties())
		{
			if (property.Name == nameof(isotopeDecay.CalculatedActivity))
				continue;

			var value = property.GetValue(isotopeDecay);

			if (property.Name == nameof(isotopeDecay.OriginalActivity) || property.Name == nameof(isotopeDecay.CalculatedActivity))
			{
				var activity = value as Activity;
				if (activity != null && !activity.IsValueInitialized())
					return true;
			}

			if (value == null)
				return true;
		}

		return false;
	}

	// Helper method to combine DateTime and TimeSpan into a single DateTime
	private DateTime CombineDateTime(DateTime? date, TimeSpan? time)
	{
		if (!date.HasValue || !time.HasValue)
		{
			throw new ArgumentException("Date and Time must have values.");
		}

		return date.Value.Date.Add(time.Value);
	}

	private void UpdateCalculatedActivityRenderFragment()
	{
		double calculatedActivity = isotopeDecay.CalculatedActivity.GetValue(isotopeDecay.ActivityUnit);
		string formattedCalculatedActivity;

		if (calculatedActivity >= 10000)
		{
			formattedCalculatedActivity = calculatedActivity.ToString("0.##E+0");
		}
		else if (calculatedActivity <= 0.0001)
		{
			formattedCalculatedActivity = calculatedActivity.ToString("0.##E-0");
		}
		else
		{
			formattedCalculatedActivity = calculatedActivity.ToString("0.####");
		}

		calculatedActivityContent = @<MudText Typo="Typo.h6">@(formattedCalculatedActivity)</MudText>;
	}
}
